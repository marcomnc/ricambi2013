<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

/**
 * Product view template
 *
 * @see Mage_Catalog_Block_Product_View
 * @see Mage_Review_Block_Product_View
 */
?>
<?php 
$_helper = $this->helper('catalog/output');
$_product = $this->getProduct();
$theme = $this->helper('ultimo'); 
$hasCanvas = !Mage::Helper('rcatalog')->isNotImage($_product->getData(Mage::Helper('rcatalog')->getSchemaAttribute()));
?>
<script type="text/javascript">
    var optionsPrice = new Product.OptionsPrice(<?php echo $this->getJsonConfig() ?>);
</script>
<div id="messages_product_view"><?php echo $this->getMessagesBlock()->getGroupedHtml() ?></div>
<div class="product-view nested-container <?php echo $_product->getTypeId();?>">
    <?php
        //Calculate the width (in grid units) of the product page columns
        $imgColUnits = $theme->getCfg('product_page/image_column');
        $primaryColUnits = $theme->getCfg('product_page/primary_column');
        $secondaryColUnits = $theme->getCfg('product_page/secondary_column');

        if (empty($secondaryColUnits)):
                $primaryColUnits += 12 - ($imgColUnits + $primaryColUnits);
        endif;
    ?>
    <?php if ($hasCanvas): ?>
    <div id="grouped-canvas" class="grouped-canvas grid12-<?php echo $imgColUnits; ?>">
        
    </div>
    <?php endif; ?>
    <div class="grouped-data grid12-<?php if ($hasCanvas): echo $imgColUnits; else: echo "full"; endif; ?>">
        <form action="<?php echo $this->getSubmitUrl($_product) ?>" method="post" id="product_addtocart_form"<?php if($_product->getOptions()): ?> enctype="multipart/form-data"<?php endif; ?>>
            <div class="clearer"></div>
            <span class="grouped-accessories">
                <div class="product-img-box">
                    <?php echo $this->getChildHtml('media') ?>
                    <?php //Product labels
                        echo $this->helper('ultimo/labels')->getLabels($_product);
                    ?>
                </div>

                <div class="product-name">
                    <h1><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></h1>
                </div>

                <?php echo $this->getReviewsSummaryHtml($_product, false, true); //reviews ?>

                <?php if ($_product->getShortDescription()): ?>
                    <div class="short-description">
                        <div class="std"><?php echo $_helper->productAttribute($_product, nl2br($_product->getShortDescription()), 'short_description') ?></div>
                    </div>
                <?php endif;?>


                <?php if (!$this->hasOptions()): //add to cart when no options ?>
                    <?php if($_product->isSaleable()): ?>
                        <div class="add-to-box">
                            <?php echo $this->getChildHtml('addtocart') ?>
                            <?php echo $this->getChildHtml('extra_buttons') ?>
                            <?php if ($addtoBoxHtml = $this->getChildHtml('addto')): //compare, wishlist ?>
                        <div class="action-box addto-textlink clearer">
                                                <?php echo $addtoBoxHtml; ?>
                                                <?php if ($this->canEmailToFriend()): ?>
                                <p class="email-friend"><a href="<?php echo $this->helper('catalog/product')->getEmailToFriendUrl($_product) ?>"><?php echo $this->__('Email to a Friend') ?></a></p>
                            <?php endif; ?>
                                        </div>
                    <?php endif; ?>
                        </div>
                     <?php else: ?>
                         <?php echo $this->getChildHtml('extra_buttons') ?>
                        <?php if ($addtoBoxHtml = $this->getChildHtml('addto')): //compare, wishlist ?>
                            <div class="action-box addto-textlink clearer">
                                                    <?php echo $addtoBoxHtml; ?>
                                                    <?php if ($this->canEmailToFriend()): ?>
                                    <p class="email-friend"><a href="<?php echo $this->helper('catalog/product')->getEmailToFriendUrl($_product) ?>"><?php echo $this->__('Email to a Friend') ?></a></p>
                                <?php endif; ?>
                            </div>
                        <?php endif; ?>
                    <?php endif; ?>                
                <?php endif; ?>

                <?php if ($_product->isSaleable() && $this->hasOptions()): ?>
                    <?php if ($container1_html = $this->getChildChildHtml('container1', '', true, true)): ?>
                        <div class="container1-wrapper"><?php echo $container1_html; ?></div>
                    <?php endif; ?>
                <?php endif;?>

                <?php echo $this->getChildHtml('catalog.product.related');
                ?>
            </span>
            <div class="no-display">
                <input type="hidden" name="product" value="<?php echo $_product->getId() ?>" />
                <input type="hidden" name="related_product" id="related-products-field" value="" />
            </div>


            <div class="product-shop grid-full">

                
                <?php if ($extrahint_html = $this->getChildHtml('extrahint')): //qty increments ?>
                    <div class="extrahint-wrapper"><?php echo $extrahint_html; ?></div>
                <?php endif; ?>

                <div class="product-type-data"><?php echo $this->getChildHtml('product_type_data'); ?></div>

                <?php echo $this->getTierPriceHtml(); //tier prices ?>

                <?php echo $this->getChildHtml('alert_urls'); //alerts ?>
                <?php echo $this->getChildHtml('other'); ?>
                <?php echo $this->getChildHtml('product_primary_bottom_placeholder'); //Placeholder for extensions ?>

                <?php if ($tmpHtml = $this->getChildHtml('block_product_primary_bottom')): ?>
                    <div class="block_product_primary_bottom"><?php echo $tmpHtml; ?></div>
                <?php endif; ?>

            </div> <!-- end: product-shop -->

            <?php if (!empty($secondaryColUnits)): ?>
                <div class="product-secondary-column grid12-<?php echo $secondaryColUnits; ?>">
                    <div class="inner">

                                            <?php //Placeholder for extensions ?>
                                            <?php if ($tmpHtml = trim($this->getChildHtml('product_secondary_top_placeholder'))): ?>
                                                    <div class="feature-wrapper bottom-border"><?php echo $tmpHtml; ?></div>
                        <?php endif; ?>

                        <?php if ($tmpHtml = $this->getChildHtml('block_product_secondary_bottom')): ?>
                            <div class="block_product_secondary_bottom"><?php echo $tmpHtml; ?></div>
                        <?php endif; ?>

                        <?php //echo $this->getChildHtml('additional'); ?>

                                    </div>
                </div> <!-- end: product-secondary-column -->
            <?php endif; ?>

            <?php if ($_product->isSaleable() && $this->hasOptions()): ?>
                            <?php if ($container2_html = $this->getChildChildHtml('container2', '', true, true)): ?>
                            <div class="box-additional grid-full">
                                            <div class="container2-wrapper"><?php echo $container2_html; ?></div>
                                    </div>
                    <?php endif; ?>
            <?php endif; ?>

        </form>
    </div>
    <script type="text/javascript">
    //<![CDATA[
        var productAddToCartForm = new VarienForm('product_addtocart_form');
        productAddToCartForm.submit = function(button, url) {
            if (this.validator.validate()) {
                var form = this.form;
                var oldUrl = form.action;

                if (url) {
                   form.action = url;
                }
                var e = null;
                try {
                    for (var i=0; i<$$('input.grouped-input-qty-field').length; i++) {
                        var origValue = parseInt($$('input.grouped-input-qty-field')[i].readAttribute("rel"));
                        var value = parseInt($$('input.grouped-input-qty-field')[i].readAttribute("value"));
                        $$('input.grouped-input-qty-field')[i].writeAttribute("value", (value-origValue));                        
                    }
                    this.form.submit();
                } catch (e) {
                    console.log(e);
                }
                this.form.action = oldUrl;
                if (e) {
                    throw e;
                }

                if (button && button != 'undefined') {
                    button.disabled = true;
                }
            }
        }.bind(productAddToCartForm);

        productAddToCartForm.submitLight = function(button, url){
            if(this.validator) {
                var nv = Validation.methods;
                delete Validation.methods['required-entry'];
                delete Validation.methods['validate-one-required'];
                delete Validation.methods['validate-one-required-by-name'];
                if (this.validator.validate()) {
                    if (url) {
                        this.form.action = url;
                    }
                    try {
                        for (var i=0; i<$$('input.grouped-input-qty-field').length; i++) {
                            var origValue = parseInt($$('input.grouped-input-qty-field')[i].readAttribute("rel"));
                            var value = parseInt($$('input.grouped-input-qty-field')[i].readAttribute("value"));
                            $$('input.grouped-input-qty-field')[i].writeAttribute("value", (value-origValue));                        
                        }
                        this.form.submit();
                    } catch (e) {
                    }
                }
                Object.extend(Validation.methods, nv);
            }
        }.bind(productAddToCartForm);
    //]]>
    
    </script>
    <!-- end of product-essential (class was removed) -->



	<?php //Product collaterals ?>
    <?php
    	$section = array();
		
		//Related products 
		//---------------------------------------------------------------------------
		$replaceRelated = $theme->getCfg('product_page/replace_related');
		if ($replaceRelated == 1) //don't replace with static block
		{
			if ($tmpHtml = trim($this->getChildHtml('catalog.product.related')))
				$section['related'] = $tmpHtml;
			//$section['related'] = trim($this->getChildHtml('catalog.product.related'));
		}
		elseif ($replaceRelated == 2) //if related is empty, replace with static block
		{
			if ($tmpHtml = trim($this->getChildHtml('catalog.product.related')))
				$section['related'] = $tmpHtml;
			else //related empty
				if ($tmpHtml = $this->getChildHtml('block_product_replace_related'))
					$section['related'] = '<div class="block_product_replace_related">'. $tmpHtml .'</div>';
		}
		elseif ($replaceRelated == 3) //replace with static block
		{
			if ($tmpHtml = $this->getChildHtml('block_product_replace_related'))
				$section['related'] = '<div class="block_product_replace_related">'. $tmpHtml .'</div>';
		}

		//Up-sell products
		//---------------------------------------------------------------------------
		$replaceUpsell = $theme->getCfg('product_page/replace_upsell');
		if ($replaceUpsell == 1) //don't replace with static block
		{
			if ($tmpHtml = trim($this->getChildHtml('upsell_products')))
				$section['upsell'] = $tmpHtml;
			//$section['upsell'] = $this->getChildHtml('upsell_products');
		}
		elseif ($replaceUpsell == 2) //if upsell is empty, replace with static block
		{
			if ($tmpHtml = trim($this->getChildHtml('upsell_products')))
				$section['upsell'] = $tmpHtml;
			else //upsell empty
				if ($tmpHtml = $this->getChildHtml('block_product_replace_upsell'))
					$section['upsell'] = '<div class="block_product_replace_upsell">'. $tmpHtml .'</div>';
		}
		elseif ($replaceUpsell == 3) //replace with static block
		{
			if ($tmpHtml = $this->getChildHtml('block_product_replace_upsell'))
				$section['upsell'] = '<div class="block_product_replace_upsell">'. $tmpHtml .'</div>';
		}
		
		//Compute grid units etc. for collateral blocks
		//---------------------------------------------------------------------------
		$sidebarGridClass 	= 'grid12-3';
		$tabsGridClass 		= 'grid-full';
		$upsellGridClass 	= 'grid-full';
		$upsellClasses = '';
		
		if (isset($section['related']))
		{
			$tabsGridClass		= 'grid12-9';
			$upsellGridClass	= 'grid12-9';
			$upsellClasses = 'narrow-slider'; //If sidebar displayed, upsell slider is narrow
		}
	?>
    
    
    <?php //Display collateral blocks
		  //--------------------------------------------------------------------------- ?>
    
	<div class="box-additional box-tabs <?php echo $tabsGridClass; ?>">
    	<?php $info_tabs_html = $this->getChildHtml('info_tabs');
			if (trim($info_tabs_html)) echo $info_tabs_html; ?>

		<?php //Open the "Reviews" tab, when "X Review(s)" or "Be the first to review this product" links are clicked ?>
		<script type="text/javascript">
			jQuery(function($){$("#goto-reviews, #goto-reviews-form").click(function(){if($("#product-tabs").hasClass("accor")){$("#product-tabs .tabs-panels").data("tabs").click($(".tabs-panels .acctab").index($("#acctab-tabreviews")))}else{$("#product-tabs .tabs").data("tabs").click($("#tab-tabreviews").index())}})});
		</script>
        
        <?php echo $this->getChildHtml('product_additional_data') ?>
	</div> <!-- end: box-tabs -->
    
    <?php
		if (isset($section['related']))
			echo '<div class="box-additional box-sidebar '. $sidebarGridClass .'"><div class="box-sidebar-inner">'. $section['related'] .'</div></div>';	
		if (isset($section['upsell']))
			echo '<div class="box-additional box-up-sell '. $upsellGridClass .' '. $upsellClasses .'">'. $section['upsell'] .'</div>';
	?>
    
    
</div> <!-- end: product-view -->

<script>
    var myLink = '<?php echo Mage::getModel("rcatalog/link")->setProduct($product)->getCollectionJson();?>';
    var src = '<?php echo Mage::Helper("rcatalog")->getImage($this->_product, "frontend");?>';
    
    (function($) {
        $.fn.LinkManager = function (params) {
            
            var canvas = $(this);
            
            var stage = null;
            var imgLayer = new Kinetic.Layer();
            var linkLayer = new Kinetic.Layer();
            var tooltipLayer = new Kinetic.Layer();
            
            
            var obj = $.parseJSON(params.link);
            var imgSrc = params.imageSource;
            
            if (typeof(obj) != 'undefined' && imgSrc != "") {
                $(window).load(function() {
                    InitializeCanvas();
                });
            }
            
            function InitializeCanvas() {
            
                var bkgImage = new Image();
                bkgImage.src = imgSrc;
                bkgImage.onload =  function () {
                    stage = new Kinetic.Stage({ container: canvas.attr('id'),
                                                width: bkgImage.width,
                                                height: bkgImage.height });
//                    imgLayer = new Kinetic.Layer();
//                    linkLayer = new Kinetic.Layer();
                    var img = new Kinetic.Image({ x: 0,
                                                  y: 0,
                                                  image: bkgImage,
                                                  width: bkgImage.width,
                                                  height:bkgImage.height,
                                                  id: 'bkg' });
                    
                    imgLayer.add(img);
                    
                    for (var i=0; i < obj.length; i++) {
                        PlacePosition(i, obj[i]);
                    }
                    
                    stage.add(imgLayer);
                    stage.add(linkLayer);
                    stage.add(tooltipLayer);
                    stage.draw();
                    
                    CreateToolTip();
                    if ($(window).outerHeight() < ($('.header-container').height()+$('.main-container').height()))
                        setTimeout(function() {$('.main-container').ScrollTo();}, 500);
                };
            }
            
            function CreateToolTip() {
                 var tooltip = new Kinetic.Label({
                    x: 0,
                    y: 0,
                    id: 'myToolTip',
                    opacity: 0.75,                    
                  });

                  tooltip.add(new Kinetic.Tag({
                    fill: 'black',
                    pointerDirection: 'down',
                    pointerWidth: 10,
                    pointerHeight: 20,
                    lineJoin: 'round',
                    shadowColor: 'black',
                    shadowBlur: 10,
                    shadowOffset: 10,
                    shadowOpacity: 0.5,
                    cornerRadius: 10
                  }));
                  
                  tooltip.add(new Kinetic.Text({
                    id: 'Description',  
                    fontFamily: 'Calibri',
                    fontSize: 14,
                    padding: 5,
                    fill: 'white'//,
//                    width: 300,
//                    height: 150
                  }));
                  tooltipLayer.add(tooltip);
            }
            
            function ShowToolTip(posX, posY, objId) {
                
                var toolTip = stage.get('#myToolTip')[0];
                toolTip.setX(posX);
                toolTip.setY(posY);
                var child= toolTip.getChildren() || [];
                for (var i=0; i < child.length; i++) {
                    switch (child[i].getId()) {
                        case 'Description':
                            child[i].setText("("+obj[objId].pos+") "+obj[objId].sku.toUpperCase() + "\n\n" + obj[objId].name);
                            break;
                    }
                    
                }
                tooltipLayer.setVisible(true);
                tooltipLayer.draw();
                $('#'+obj[objId].sku).ScrollTo({'noFinal': true}).addClass('selected');
                canvas.css( 'cursor', 'pointer' );
//                var imageObj = new Image();
//
//                imageObj.onload = function() {
//                  tooltipLayer.add(new Kinetic.Image({ x: 0,
//                                                  y: 0,
//                                                  image: imageObj,
//                                                  width: imageObj.width,
//                                                  height:imageObj.height,
//                                                  id: 'bkg' }));
//                    tooltipLayer.setVisible(true);
//                    tooltipLayer.draw();
//                };
//                imageObj.src = 'http://www.html5canvastutorials.com/demos/assets/darth-vader.jpg';                
            }
            
            function HideToolTip(objId) {
                tooltipLayer.setVisible(false);
                tooltipLayer.draw();
                canvas.css( 'cursor', 'default' );
                $('#'+obj[objId].sku).removeClass('selected');
            }
            
            function AddQty(objId) {
                $('#super_group_'+obj[objId].id).attr('value', parseInt($('#super_group_'+obj[objId].id).attr('value')) + 1);
                if (!$('#'+obj[objId].sku).hasClass('has-qty')) {
                    $('#'+obj[objId].sku).addClass('has-qty');
                }
            }
            
            function PlacePosition(index, objPosition) {

                var Position = new Kinetic.Group({
                    id: objPosition.id,
                    draggable: false,
                    positionText: objPosition.pos, 
                    sku: objPosition.sku,
                    name: objPosition.name,
                    objId: index
                });
                var PosCircle = new Kinetic.Circle({
                    x: objPosition.x,
                    y: objPosition.y,
                    radius: 12,
                    fill: '#EB9999',
                    stroke: 'black',
                    objId: index
                });
                var PosText = new Kinetic.Text({
                     x: objPosition.x-10,
                     y: objPosition.y-7,
                     text: objPosition.pos, 
                     fill: 'balck',
                     fontSize: 14,
                     width: 20,
                     fontStyle: 'bold',
                     align: 'center',
                });
                
                Position.add(PosCircle);
                Position.add(PosText);
                linkLayer.add(Position);
                
                Position.on('mouseenter', function(e) {
                    var child= this.getChildren();
                    ShowToolTip(e.layerX, e.layerY, child[0].attrs.objId) 
                });
                
                Position.on('click', function(e) {
                    var child= this.getChildren();
                    AddQty(child[0].attrs.objId) 
                });
                
                Position.on('mouseover', function(e) {
                    var child= this.getChildren();
                    child[0].setFill('#0096d9');
                    linkLayer.draw();
                    console.log(e);
                });
                
                Position.on('mouseout', function(e) {
                    var child= this.getChildren();
                    child[0].setFill('#EB9999');
                    HideToolTip(child[0].attrs.objId);
                    linkLayer.draw();                    
                    console.log(e);
                });
                
           }
       }
    })(jQuery);
    
    
    jQuery('#grouped-canvas').LinkManager({ 'link': myLink, 'imageSource': src });
    
</script>