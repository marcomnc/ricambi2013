<!-- Posizionamento
x: parseInt(PosCircle.getX()) + parseInt(Position.getX()), 
y: parseInt(PosCircle.getY()) + parseInt(Position.getY()),
-->


<input type="input" id="associated-scheme" name="associated-scheme" value="<?php echo $this->getBASE64JsonPosition();?>"/>
<input type="input" id="dbg" name="" value="" style="width: 200px"/>
<div class="grouped-grid">
    <?php echo $this->getGridHtml() ?>   
</div>
<div class="grouped-canvas" id="grouped-canvas">
    
</div>

<script>
    
    var AdminCanvasManagerGrid = new Class.create();
    
    AdminCanvasManagerGrid.prototype = {
        initialize: function(objFlat, imgUrl, container, imgDelete) {
            this.imgUrl = imgUrl;
            this.imgDelete = imgDelete;
            this.idGrid = null;
            this.link = null;
            if (objFlat!="") {
                this.link=objFlat.evalJSON();
            }
            this.stage = new Kinetic.Stage({
			container: container,
			width: 544,
			height: 794,
                        id: 'gcanvas'
		});
            this.layer = new Kinetic.Layer();
            this.layerGroup = new Kinetic.Layer();
            this.layerDelete = new Kinetic.Layer();
            this.myCanvas = myCanvas = $('grouped-canvas').down(container);
            
            this.trInitializeImage = this.InitializeImage.bindAsEventListener(this);
            this.trInitializeCanvas = this.InitializeCanvas.bindAsEventListener(this);
            this.trLayerAddImageDelete = this.LayerAddImageDelete.bindAsEventListener(this);
            this.trRecalculateObject = this.RecalculateObject.bindAsEventListener(this);
            this.trDragEnd = this.DragEnd.bindAsEventListener(this);
            
            this.trDragPosition = this.DragPosition.bind(this);
            
            this.isEvidence = false;
            this.trEvidenceRow = this.EvidenceRow.bind(this);
            
            this.image = new Image();
            this.image.onload = this.trInitializeCanvas;
            
            Event.observe(window, 'load', this.trInitializeImage);
            this.DragManager();
        },
        DecorateGrid: function(idGrid) {
            this.idGrid = idGrid;
            $$('#'+this.idGrid+' span.counter').each(function(el) {
                $(el).setAttribute('rel',0);
            });
            for(var id in this.link) {
                var idLink = this.link[id].linkid;
                $$('#'+this.idGrid+' tr:not(.headings)').each(function(el) {
                    if ($(el).hasClassName('link_id_'+idLink)) {
                        $(el).addClassName('assigned');
                        $('count_'+idLink).setAttribute('rel',parseInt($('count_'+idLink).getAttribute('rel'))+1);
                    }
                });
            }            
            this.RefrehCounter();
        },
        RefrehCounter: function() {
            $$('span.counter').each(function(el) {
                $(el).update($(el).getAttribute('rel'));
            });
        },
        InitializeImage: function() {
            
            this.image.src = this.imgUrl;
        },
        InitializeCanvas: function() {
            var image = new Kinetic.Image({
                                    x: 0,
                                    y: 0,
                                    image: this.image,
                                    width: this.image.width,
                                    height:this.image.height,
                                    id: 'bkg'
                                });
            image.setListening(false);
            imgDel = new Image();
            imgDel.onload = this.trLayerAddImageDelete;
            imgDel.src = this.imgDelete;
            this.layer.add(image);
            for(var id=0; id<this.link.length;id++) {
                this.PlacePosition(this.link[id].id_link, this.link[id].x, this.link[id].y, this.link[id].linkid, this.link[id].pos);
            }
            this.stage.add(this.layerGroup);
            this.stage.add(this.layer);
            this.layer.setZIndex(0);
            this.layerGroup.setZIndex(10);
        },  
        PlacePosition: function(id, x, y, linkid, pos) {
    
            var Position = new Kinetic.Group({
                id: id,
                draggable: true,
                linkid: linkid,
                positionText: pos
            });
            var PosCircle = new Kinetic.Circle({
                x: x,
                y: y,
                radius: 10,
                fill: 'red',
                opacity: 0.50,
                linkid: linkid
            });
            var PosText = new Kinetic.Text({
                 x: pos.length>1?(x-7):(x-5),
                 y: y-6,
                 text: pos, 
                 fill: 'balck',
                 fontSize: 14,
                 fontStyle: 'bold',
                 align: 'center',
                 linkid: linkid
            });
            
            Position.add(PosCircle);
            Position.add(PosText);
            var startAt = {x: x, y: y};
            this.layerGroup.add(Position);
            
            //var layer = this.layer;
            //var stage = this.stage;
            
            //Position.on('mouseenter', this.EvidenceRow);
            var evidence = this.EvidenceRow;
            Position.on('mouseout.position'+linkid, function(ev) {
                evidence(linkid,false);
                ev.cancelBubble=true;
            });
            Position.on('mouseenter.position'+linkid, function(ev) {
                evidence(linkid,true);
                ev.cancelBubble=true;
            });
            
            Position.on('dragstart', function(e) {
                startAt.x = this.getX();
                startAt.y = this.getY();
                PosCircle.setAttrs({
                    fill: 'green',
                    opacity: 0.20
                });                
                $('dbg').setAttribute('value', 'S:' + startAt.x + "-" + startAt.y);
            });
            
            Position.on('dragend', this.trDragPosition);
            Position.setZIndex(10);
            this.layerGroup.draw();
        },
        DragPosition: function(e) {
            console.log(e);
            var position = e.dragEndNode;
            var circle = position.children[0];
            circle.setAttrs({
                fill: 'red',
                opacity: 0.50
            });
            var ReturnAnim = new Kinetic.Tween({
                node: position,
                x: 0, 
                y: 0, 
                duration: 1,
                onFinish: function() {
                    position.fire('mouseout');
                }
             });

            var usrPosition=this.stage.getPointerPosition();
            console.log(circle.getAbsolutePosition());

            if (this.stage.get('#DeleteBox')[0].intersects(circle.getAbsolutePosition())) {
                if (confirm('Cancello il posizionamento?')) {
                    position.destroy();
                } else {
                    ReturnAnim.play();
                }
            }
            if (typeof(usrPosition)=='undefined') {
                position.fire('mouseout');
            }
            this.layerGroup.draw();
            this.RecalculateObject();
            $('dbg').setAttribute('value', 'F:' + position.getX() + "-" + position.getY() + "-- C:" + circle.getX() + "-" + circle.getY() );

        },
        RecalculateObject: function() {
            var arr=[];
            this.layerGroup.children.each( function(pos) {
                console.log(pos);
                var obj={};
                obj.id_link = pos.attrs.id;
                obj.linkid = pos.attrs.linkid;
                obj.pos = pos.attrs.positionText;
                for (var child in pos.children) {
                    if (pos.children[child].shapeType=='Circle') {
                        var linkPos = pos.children[child].getAbsolutePosition();
                        obj.x = linkPos.x;
                        obj.y = linkPos.y;
                    }
                }
                arr.push(obj);
            });
            this.link = arr;
            this.DecorateGrid(this.idGrid);
            $('associated-scheme').setAttribute('value', Base64.encode(Object.toJSON(arr)));
        },
        EvidenceRow: function(linkid, yes) {
            var cls='tr.position_list_table.link_id_'+linkid;

            $$(cls).each(function(el) {
                if (yes) $(el).addClassName('evidence');
                else $(el).removeClassName('evidence');
            });
        },
        LayerAddImageDelete: function() {
            var bkg = this.stage.get('#bkg')[0];
            var img = new Kinetic.Image({
                            x: bkg.getWidth() - imgDel.width,
                            y: 0,
                            id: 'DeleteBox',
                            image: imgDel,
                            width: imgDel.width,
                            height:imgDel.height,
                            draggable: false
                        });
            this.layerDelete.add(img);
            this.stage.add(this.layerDelete);
            this.layerDelete.draw();
            this.layerDelete.setZIndex(1);
        },
        DragManager: function() {
            for(var addTo=0;addTo<$$('.position-add-to').length;addTo++){
                new Draggable($$('.position-add-to')[addTo],{ revert: true, ghosting: true,
                                                              onEnd: this.DragEnd});
            }
        },
        DragEnd: function(sender, event) {
            console.log(sender);
        }
    };
    
    var objJsGrid = new AdminCanvasManagerGrid('<?php echo $this->getJsonPosition();?>', '<?php echo $this->getImage();?>', 'grouped-canvas','<?php echo $this->getSkinUrl('images/delete.png'); ?>');
    Event.observe(window, 'load', function () {
        objJsGrid.DecorateGrid("<?php echo $this->getChild('grouped.grid')->getId() . '_table';?>");
    });
    
//    
//    
//    var jsonData = '<?php echo $this->getJsonPosition();?>'; 
//                    
//    var layer = new Kinetic.Layer();
//    var imageObj = new Image();
//    imageObj.onload = function() {
//        var image = new Kinetic.Image({
//                x: 0,
//                y: 0,
//                image: imageObj,
//                width: imageObj.width,
//                height:imageObj.height
//            });
//        
//        layer.add(image);
//        
//        if (jsonData!='') {
//            var obj = jsonData.evalJSON();
//            for(var id in obj) {
//               if (obj[id].x!=null && obj[id].x!=null) {
//                   (function() {

//                   })();
//               }
//            }
//        }
//
//        stage.add(layer);
//        myCanvas = $('grouped-canvas').down('canvas');
//    };
//    
//    imageObj.src = "<?php echo $this->getImage();?>";
//    
//    $$('.obj-position').each(function(obj){
//        var tableRow = $(obj).up('tr');
//        var rowDrag = new Draggable($(tableRow), { 
//                                    scroll: window,  
//                                    onEnd: function(s,e) {
//                                           console.log(s);
//                                           console.log(e);
//                                           if (e.toElement == myCanvas ) {
//                                                var Position = new Kinetic.Circle({
//                                                 x: e.layerX,
//                                                 y: e.layerY,
//                                                 radius: 10,
//                                                 fill: 'red',
//                                                 opacity: 0.75
//                                             });
//                                             layer.add(Position);
//                                             layer.draw();
//                                           }
//                                        }
//                                    });
//        
//    });

    
</script>